# Node Packet

An evented binary packet and structure parser for Node.js.

## Synopsis

Use tar as an example?

## Objectives

Node Packet simplifies the construction an maintainence of libraries that
convert binary to JavaScript and back. The name Packet may make you think that
it is desinged solely for binary network protocols, but it is also used to read
and write binary file formats.

**Incremental** ~ Node packet creates incremental parsers and serailizers that
are almost as fast as the parser you'd write by hand, but a lot easier to define
and maintain.

**Declarative** ~ Packet defines a binary structure using a pattern language
inspired by Perl's `pack`. The binary patterns can be used to define both
parsers and serializers. If you have a protocol specificationre, or even just a
C header file with structures that define your binary data, you can probably
transalte that directly into Node Packet patterns.

For parsers, you match the patterns to actions you want to take when the pattern
is matched. For serializers you simply give the values to write the pattern to
follow when writing them.

**Expressive** ~ The pattern language can express

  * signed and unsigned integers, 
  * endianess of singed and unsigned integers,
  * floats and doubles,
  * fixed length arrays of characters or numbers,
  * length encoded strings of characters or numbers,
  * zero terminated strings of characters or numbers,
  * said strings terminated any fixed length terminator you specify,
  * padding of said strings with any padding value you specify,
  * singed and unsigned integers extracted from bit packed integers,
  * conditions based on bit patterns
  * character encodings,
  * custom tranformations,
  * and pipelines of character encodings and custom tranformations.

**Streaming** ~ Node Packet implements the Node.js [stream
interface](http://nodejs.org/docs/v0.4.7/api/streams.html) in both the `Parser`
and the `Serializer`. You can pump a stream into a Packet `Parser` and it will
invoke your packet handlers.  

## Installing

Install Packet using NPM. The source is available on
[GitHub](https://github.com/bigeasy/node-packet).

```
npm install packet
```

## Binary Pattern Language

Node Packet defines a binrary format using a binary pattern language inspried by
Perl's `pack` function. The pattern language is used in a `Parser` to define the
parameters passed to callback when enough bytes are read from the input stream
to satisfy the pattern. The pattern language is used in a `Serializer` to define
how JavaScript primitives passed to the `serialize` method are written to stream.

The pattern works with a `Parser` to deconstruct a binary stream and turn it
into JavaScript primitives, passing those primitives as the arguments to a user
defined callback.

### Big-Endian Byte Ordering

To define a big-endian byte ordering for a field, prefix the bit size with `b`.

**Mnemonic**: The letter `b` stands for big-endian.

```javascript
"b16"             // Big-endian 32 bit number.
"b8"              // Endianess of a single byte is irrelevant.
"l16, b8"         // Big-endian 16 bit integer followed by a byte.
```

### Little-Endian Byte Ordering

To define a little-endian byte ordering for a field, prefix the bit size with `l`.

**Mnemonic**: The letter `l` stands for little-endian.

```javascript
"l32"             // Little-endian 32 bit integer.
"l8"              // Endianess of a single byte is irrelevant.
"l16, b8"         // Little endian 16 bit integer followed by a byte.
```

### Skipping Bytes

You can skip over bytes your pattern with `x`.

**Mnemonic**: The letter `x` means to cross-out, which is kind of like skipping.

```javascript
"b8, x16, l16"    // A byte, two skipped bytes, and a little-endian 16 bit
                  // integer.
```

### Signed Versus Unsigned Integers

All numbers are assumed to be unsigned, unless prefixed by a negative symbol.

**Mnemonic**: The `-` symbol indicates the possiblity of negative numbers.

```javascript
"-b32"            // Big-endian 32 bit signed integer.
"-l32"            // Little-endian 32 bit signed integer.
"b32"             // Big-endian 32 bit unsigned integer.
```

### IEEE 754 Floating Point Numbers

The number type for JavaScript is the  64 bit IEEE 754 floating point. Node
Packet can read write 64 bit and 32 bit IEEE 754 floating point numbers.

To indicated that the type is a floating point number, use the `f` type suffix.
This is indicated with a `f` suffix.

**Mnemonic**: The letter `f` stands for
*floating-point*.

```javascript
"b64f"            // Big-endian 64 bit IEEE 754 double floating point number.
"l32f"            // Little-endian 32 bit IEEE 754 single floating point number.
```

The floating-point numbers can be stored in little-endian or big-endian byte order.

### Arrays of Raw Bytes

A value will be converted to a big-endian array of bytes if followed by an `a`
suffix.

**Mnemonic**: The letter `a` stands for *array*.

```javascript
"l128a"           // Unsigned little-endian 128 bit integer as big-endian array
                  // of bytes.
```

Note that big-endian means that the most signifcant byte is at index `0` of the
array.

This can be surprising if you're expecting the the significance of the bytes
will increase with the index of the array, but then that's what little-endian is
all about. (Big-endian orders like Arabic numerals, while little-endian orders
like offsets into memory.)

If you'd prefer a little-endian array, you can reverse the array with the `@`
qualifier.

**Mnemonic**: The `@` character is a swirl and we want to turn our array around.

```javascript
"l128a@"          // Unsigned little-endian 128 bit integer as little-endian
                  // array of bytes.
```

### Bytes as Hex Strings

A value will be converted to a big-endian hex string if followed by an `h`
suffix. 

```javascript
"l128h"           // Unsigned little-endian 128 bit integer as a big-endian hex
                  // string.
```

Like the raw byte of arrays, the hex string is in big-endian order with the most 
significant bytes at the top. It is less likely that you'll want to reverse a
hex string, but if you, you can use the `@` qualifier.

**Mnemonic**: The `@` character is a swirl and we want to turn our string  around.

```javascript
"l128h@"          // Unsigned little-endian 128 bit integer as a little-endian
                  // hex string.
```

### Arrays of Common Types

It is often the case that a binary format contains an array of values. The most
common case are arrays of bytes represnting ASCII or UTF-8 strings.

Arrays are specified with an subscript and a count.

**Mnemonic**: The square brackets are used as array subscripts in JavaScript,
and used to declare array length in other C dialect languages.

```javascript
"b32[4]"          // An array of four big-endian 32 bit numbers.
"b8[16]"          // An array of 16 bytes.
```

The array notation produces an array of the type before the subscript.

### Zero Terminated Arrays

Zero terminated series are speified with a `z` qualifier.

You can specify both terminiation and width together. Why would you need this?
This occurs in underlying C structures when there is a fixed width character
array in a structure, but the structure still contains a zero terminated string.

**Upcoming**: Chose your own terminator.

**Mnemonic**: The letter `z` stands for zero.

```javascript
"l16z"            // Little-endian 16 bit numbers terminated by a zero value.
"b8z"             // Byte string terminated by zero.
"b8[12]z"         // Byte string terminated by zero in a field 12 bytes long.
```

### Array Padding

You can specify a padding value immediately after the array brackets using curly
braces. This should be the numeric value, or character code for padding. If you
want to zero pad, use `0`. If you want to pad with ASCII spaces use `32`.

**Mnemonic**: Curly braces are used to define array literals in C.

```javascript
"b16[12]{0}"      // Array of 12 big-endian 16 bit integers, zero padded.
"b8[12]{32}z"     // Byte string terminated by zero in a field 12 bytes long
                  // ascii space padded.
```
### Length Encoded Arrays

Length encoded arrays are specified by joining a count type and a value type
with a `/`.

**Mnemonic**: Inspired by Perl's `pack`, which uses the slash to separate count
and type.

```javascript
"b8/b8"           // Length encoded byte array with a byte length.
"l16/b8"          // Length encoded byte array with 16 bit little-endian length.
```

### Transforms

Often there are transformations that you need to perform on an field to get
it to its final state. You may need to convert a byte array to string of a
particular character encoding, for example. This is done with a tranformation
functions which are specified with a transformation pipeline.

If the transformation is a fixed transformation, you can perform the
transformation by defining a pipeline. A pipeline defines one or more
tranformations that are invoked on the value after parsing and before
serialization. The transformations can accept scalar JavaScript parameters.

```javascript
function str(encoding, name, field, parsing, value) {
    if (parsing) {
        var buffer = new Buffer(array.length)
        for (var i = 0; i < value.length; i++) {
            buffer[i] = value[i];
        }
        var length = value.length
        if (field.terminator) {
            length += field.terminator.length;
        }
        reutrn buffer.toString(encoding, 0, length);
    } else {
        if (field.terminator) {
            value += field.terminator;
        }
        return new Buffer(value, encoding);
    }
}
```

Now you can use the transform in your pattern.

```javascript
"n8z|str('ascii')"      // An ascii string terminated by zero.
"n8z|str('ascii'), b16" // An ascii string terminated by zero followed by a
                        // big-endian 16 bit integer.
```

The `str` transform is defined by default. The transform names are purposely
terse to fit with the brevity of the pattern language.

## Reference

@ packet

Node Packet exports the ec2 namespace, which provides the {{Structure}},
{{Parser}} and {{Serializer}} classes.

~ new Structure(pattern)

  ~ pattern

  The packet pattern.

A structure is an object that both reads from and writes to a buffer
syncrhonously. When reading, buffer must contain the entire contents of the
structure. When writing, the buffer must have enough space to accomdoate the
structure.

~ read(buffer, offset, callback)

  ~ buffer    - The byte buffer.
  ~ offset?   - The optional offset into the byte buffer. Defaults to `0`.
  ~ callback  - Called with the parameters read from the byte buffer.

The read method accepts a buffer with an optional offset. The number of
arguments is determined by the structure packet pattern, and must match
the number of arguments expected by the packet pattern.

The callback will be called with the fields read from the buffer, with the
actual count of bytes read as the last parameter.

~ write(buffer, offset, value...)

  ~ buffer    - The byte buffer.
  ~ offset?   - The optional offset into the byte buffer. Defaults to `0`.
  ~ value...  - The values of the structure.

Write the arguments to the  buffer at the optional offset. The arguments are
determined by the structure bit pattern. Returns the number of bytes written.

~ sizeOf(value...)

  ~ value...  - The values of the structure.

Get the size of the structure for the given variable length values. A structure
can have 0 or more variable length values.

The `sizeOf` method does not expect and will not correctly calculate the size of
the structure if fixed size value are given.

~ new Parser()

Parses a buffer and emits events based on patterns.

~ packet(name, pattern, callback)

  ~ name - The name of the packet type.
  ~ pattern - The packet pattern.
  ~ callback? - Called when a packet of this type has been read from a buffer.

Defines a named packet type optionally assigning a default response for the
packet type.

function: parse

  parameter: nameOrPattern

  Either the name of a named packet or a one off 

function: clone

Clone the packet parser to create a packet parser that shares the named packet
definitions but has its own parser state.

This allows a packet parser prototype to be used to efficently create initialized
instances.

class: Serializer
